# Measure minimum distance between two atom selections 
# author: Yuhang Wang
# date: 06/11/2015
#
# note: since Tcl doesn't allow input argument to contain spaces
#     the only way to work around is to use input files that
#     contains an input string (with any number of spaces)
#
# usage: vmd -dispdev text -e get_min_distance.tcl \
#           -args PSF DCD \
#                 OUTPUT_DATA \
#                 FILE_SELECTION_1 \
#                 FILE_SELECTION_2
# note: OUTPUT_DATA is the file that will contain all the data generated by this script
#
###################################################################################

puts "'------------'"
set ccc 0
set in_psf [lindex $argv $ccc]
puts "in psf  $in_psf"

incr ccc
set in_dcd [lindex $argv $ccc]

incr ccc
# The name of the file that will contain all the output data
# generated by this script.
set output_file_name [lindex $argv $ccc]

incr ccc
# a file containing an atom selection 1
set file_selection_1 [lindex $argv $ccc]

incr ccc
# a file containing an atom selection 2
set file_selection_2 [lindex $argv $ccc]

#=================================================================
proc get_selection_str {in_file_name} {
  ## Read a file and use its content a the returning string 
  set IN [open $in_file_name r]
  set my_str [read $IN]
  close $IN
  return $my_str
}

proc load {in_psf in_dcd} {
  ## load psf, and dcd 
  puts "=============================================================="
  puts "--------------------------------------------------------------"
  puts "     Loading $in_psf"
  puts "     Loading $in_dcd"
  puts "--------------------------------------------------------------"
  set molId [mol new $in_psf]
 
  mol addfile $in_dcd waitfor all molid $molId 
  return $molId
}

proc error_zero_atom_selected {str_selection} {
  puts "\n-----------------------------------------------------------------------------"
  puts stderr "\nERROR HINT: ZERO ATOMS SELECTED FOR ATOM SELECTION: $str_selection\n"
  puts "-----------------------------------------------------------------------------\n"
  exit
}

proc get_min_distance {molId str_selection_1 str_selection_2} {
  # measure the minimum distance between two atom selections 
  puts "--------------------------------------------------------------"
  puts "  Measure min-distance between two atom selections"
  puts "  (1):  $str_selection_1"
  puts "  (2):  $str_selection_2"
  puts "--------------------------------------------------------------"

  set list_of_selection_object_lists {}
  set list_str_atom_selections [list $str_selection_1 $str_selection_2]

  # create a list of atom selection objects for group 1 and group 2
  foreach str_atom_selection $list_str_atom_selections {
    set sel [atomselect $molId $str_atom_selection]
    set number_of_selected_atoms [$sel num]
    if {$number_of_selected_atoms == 0} {error_zero_atom_selected $str_atom_selection}
    puts "--------------------------------------------------------------------------------------------------------"
    puts "Note: $number_of_selected_atoms atom(s) selected for selection: \"$str_atom_selection\""
    puts "--------------------------------------------------------------------------------------------------------"
    set list_indices [$sel get index]
    $sel delete

    set list_atom_objects {}
    foreach id $list_indices {
      set sel [atomselect $molId "index $id"]
      lappend list_atom_objects $sel 
    }
    lappend list_of_selection_object_lists $list_atom_objects
  }

  set list_min_distances {}
  set total_number_of_frames [molinfo $molId get numframes]

  set list_atoms_group_1 [lindex $list_of_selection_object_lists 0]
  set list_atoms_group_2 [lindex $list_of_selection_object_lists 1]
  for {set i 0} {$i < $total_number_of_frames} {incr i} {
    set list_tmp_distances {}
    foreach sel1 $list_atoms_group_1 {
      foreach sel2 $list_atoms_group_2 {
        $sel1 frame $i
        $sel2 frame $i
        set coord1 [measure center $sel1]
        set coord2 [measure center $sel2]
        set distance [veclength [vecsub $coord1 $coord2]]
        lappend list_tmp_distances $distance
      }
    }
    set min_distance [lindex [lsort -real -increasing $list_tmp_distances] 0]
    lappend list_min_distances $min_distance
  }
  
  # clean up objects
  foreach list_atom_objects $list_of_selection_object_lists {
    foreach object_selection $list_atom_objects {
      $object_selection delete
    }
  }
  
  return $list_min_distances
}

proc write_output {in_list output_file_name} {
  puts "--------------------------------------------------------------"
  puts "  Output file: "
  puts "  $output_file_name"
  puts "--------------------------------------------------------------"
  set OUT [open $output_file_name w]
  foreach data $in_list {
      puts $OUT $data
  }
  close $OUT
}

#---------------------------------------------------------------------------
#                     MAIN 
#---------------------------------------------------------------------------

## string for atom selection 1
set str_selection_1 [get_selection_str $file_selection_1]

## string for atom selection 2
set str_selection_2 [get_selection_str $file_selection_2]

set molId [load $in_psf $in_dcd]
set list_min_distances [get_min_distance $molId $str_selection_1 $str_selection_2]
write_output $list_min_distances $output_file_name
mol delete $molId 

puts "============================================================="
puts "                         DONE!                               "
puts "  Output: $output_file_name                                  "
puts "============================================================="
exit
